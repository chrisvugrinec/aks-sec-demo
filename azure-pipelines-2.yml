# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: 'dude-demos'

steps:
# Create AKS subnet and cluster according to specs
- task: AzureCLI@2
  enabled: false
  name: "create_aks"
  displayName: "Create AKS"
  inputs:
    azureSubscription: 'aks-infra-pipeline'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      cd pipeline/3_aks
      ./1_create.sh $(resourcegroup) $(location) $(admin_resourcegroup) $(clustername) $(aks_vnet) $(route_table) $(aks_subnet_prefix)

- task: AzureCLI@2
  enabled: false
  name: "create_dns"
  displayName: "Create DNS stuff"
  inputs:
    azureSubscription: 'aks-infra-pipeline'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      cd pipeline/3_aks
      ./2_createDNSstuff.sh $(admin_resourcegroup) $(resourcegroup) $(mgmt_vnet) $(clustername) $(loadbalancerip)

- task: Bash@3
  enabled: true
  name: "role_settings"
  displayName: "Setting Rights and roles"
  inputs:
    targetType: 'inline'
    script: |
      cd pipeline/3_aks
      ./3_assign_RightsAndRoles.sh $(admin_resourcegroup) $(resourcegroup) $(clustername) $(aks_vnet) $(aks_user_group_id)

# Configure AKS cluster
- task: Bash@3
  enabled: true
  displayName: "Configure AKS cluster"
  name: "config_aks_cluster"
  inputs:
    targetType: 'inline'
    script: |
      cd pipeline/3_aks
      kubectl apply -f rbac/dev-namespace.yaml
      kubectl apply -f rbac/role-aks-user.yaml
      kubectl apply -f rbac/rolebinding-aks-user.yaml
      kubectl apply -f rbac/role-aks-user-ingress.yaml
      kubectl apply -f rbac/rolebinding-aks-user-ingress.yaml
      kubectl apply -f nginx/common/ns-and-sa.yaml
      kubectl apply -f nginx/rbac/rbac.yaml
      kubectl apply -f nginx/common/default-server-secret.yaml
      kubectl apply -f nginx/common/nginx-config.yaml
      kubectl apply -f nginx/common/vs-definition.yaml
      kubectl apply -f nginx/common/vsr-definition.yaml
      kubectl apply -f nginx/common/ts-definition.yaml
      kubectl apply -f nginx/deployment/nginx-ingress.yaml
      kubectl apply -f nginx/service/loadbalancer.yaml
